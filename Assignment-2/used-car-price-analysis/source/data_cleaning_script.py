# -*- coding: utf-8 -*-
"""data_cleaning_script.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jSSpcWxu5ZoMH9J17zDH7kzVuCPgXR65
"""

import pandas as pd

# Load data
df = pd.read_csv('/content/sample_data/train.csv')

# Check for missing values
missing_data = df.isnull().sum()

# Impute missing values (replace with mean, median, or mode)

# Convert 'Mileage' to numeric, handling errors
df['Mileage'] = pd.to_numeric(df['Mileage'], errors='coerce')
# Now calculate the mean and fill NaN values
df['Mileage'] = df['Mileage'].fillna(df['Mileage'].mean())

# --- Changes for 'Engine' column ---
# Extract numeric part from 'Engine' column
df['Engine'] = df['Engine'].str.extract('(\d+)').astype(float)
# Calculate the median of the numeric 'Engine' values and fill NaN
df['Engine'] = df['Engine'].fillna(df['Engine'].median())
# --- End of changes for 'Engine' column ---

df['Fuel_Type'] = df['Fuel_Type'].fillna(df['Fuel_Type'].mode()[0])

# Save output to a new file
df.to_csv('/content/sample_data/cleaned_missing_values.csv', index=False)

import pandas as pd
import re

# Reload data to ensure consistency with the original data
df = pd.read_csv('/content/sample_data/train.csv')

# Function to extract numeric value from string, handling various units
def extract_numeric(value):
  """
  Extracts the numeric part of a string, handling potential units.

  Args:
    value: The input string.

  Returns:
    The extracted numeric value as a float, or NaN if not found.
  """
  try:
    # Use regex to find the first numeric sequence (including decimals)
    numeric_part = re.search(r'(\d+(\.\d+)?)', str(value)).group(1)
    return float(numeric_part)
  except (AttributeError, TypeError):
    # Handle cases where regex fails to find a numeric part
    return float('nan')

# Apply the function to the relevant columns
df['Mileage'] = df['Mileage'].apply(extract_numeric)
df['Engine'] = df['Engine'].apply(extract_numeric)
df['Power'] = df['Power'].apply(extract_numeric)
# 'New_Price' likely needs more complex handling; skipped for now

# Save output to a new file
df.to_csv('/content/sample_data/unit_removed_data.csv', index=False)

# Reload data with units removed
df = pd.read_csv('/content/sample_data/unit_removed_data.csv')

# One-hot encode the categorical variables
df = pd.get_dummies(df, columns=['Fuel_Type', 'Transmission'], drop_first=True)

# Save output to a new file
df.to_csv('/content/sample_data/encoded_data.csv', index=False)

# Reload data with encoded values
df = pd.read_csv('/content/sample_data/encoded_data.csv')

# Adding a new column for car age
from datetime import datetime
current_year = datetime.now().year
df['Car_Age'] = current_year - df['Year']

# Save output to a new file
df.to_csv('/content/sample_data/feature_added_data.csv', index=False)

# Reload data with new feature
df = pd.read_csv('/content/sample_data/feature_added_data.csv')

# Check available columns in the dataframe
print(df.columns)

# Select specific columns (adjust based on available columns)
# If 'Make' and 'Model' are not present, consider removing them or using alternative relevant columns
selected_columns = df[['Location', 'Price', 'Mileage', 'Car_Age']]

# Filter: For example, filtering cars with Mileage greater than 15 kmpl
high_mileage_cars = df[df['Mileage'] > 15]

# Rename columns
df = df.rename(columns={'New_Price': 'Original_Price'})

# Arrange (Sort): Sort by Car_Age in descending order
df_sorted = df.sort_values(by='Car_Age', ascending=False)

# Summarize with groupby: For example, average Price by Fuel_Type
# Ensure 'Fuel_Type_Petrol' column exists after one-hot encoding; adjust if necessary
avg_price_by_fuel = df.groupby('Fuel_Type_Petrol')['Price'].mean().reset_index()

# Save each result to a separate file
selected_columns.to_csv('/content/sample_data/selected_columns.csv', index=False)
high_mileage_cars.to_csv('/content/sample_data/high_mileage_cars.csv', index=False)
df_sorted.to_csv('/content/sample_data/sorted_data.csv', index=False)
avg_price_by_fuel.to_csv('/content/sample_data/avg_price_by_fuel.csv', index=False)